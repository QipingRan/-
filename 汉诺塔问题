'''
汉诺塔问题的代码？？？ 

解答 

这是动态规划问题中的一种，用递归来实现较为简单方便。 

对于"将moveSum个圆盘从from柱移动到to柱（借助by柱）"这个问题，我们可以通过以下三步实现： 

将from柱最上面的moveSum-1个圆盘移动到by柱（借助to柱） 

将from柱上剩下的那1个圆盘直接移动到to柱 

将by柱上的moveSum-1个圆盘移动到to柱（借助from柱） 
'''

def move(n, a, buffer, c): 

    if(n == 1): 

        print(a,"->",c) 

        return 

    move(n-1, a, c, buffer) 

    move(1, a, buffer, c) 

    move(n-1, buffer, a, c) 

move(3, "a", "b", "c") 


'''
首先是定义了一个移动的函数,四个参数分别代表，a柱上的盘子个数，buffer也就是b柱，命名为buffer便于理解，顾名思义就是一个a移动到c的缓冲区.然后c就是目标柱子 

递归的一般写法，肯定有个中止递归循环的条件，所以在判断a柱上的盘子个数为1的时候既可以中止递归并返回,a柱上面只有一个的时候肯定就是把a移动到c了， 

递归其实是一种很抽象的算法，我们要利用抽象思维去想汉诺塔这个问题，把a柱上的盘子想成两份，就是上面的盘子和最底下的盘子---
不关心上面的盘子到底有几个，我们每次的操作就是把最底下的盘子通过缓冲区 b柱 buffer 移动到c柱。
'''



