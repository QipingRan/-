'''
基础知识：
自动轨迹绘制 
第一，需求：根据脚本来绘制图形 
第二，不是写代码，而是通过写入数据来绘制轨迹 
第三，数据脚本是自动化最重要地第一步 
自动轨迹绘制---基本思路 
步骤一，定义数据文件格式，也就是接口 
步骤二，编写程序，根据文件接口解析参数绘制图形 
步骤三，编制数据文件 
数据接口定义----没有规范，非常具有个性色彩 
比如：300(行进距离), 0(转向判断，0是左转，1是右转), 144(转向角度), 1, 0, 0(RGB的颜色参数浮点数) 
----------300, 1, 144, 0, 1, 0 
代码： 
首先是turtle绘图体系的准备工作，引入，标题，设置，颜色，大小 
-----
第二步，先设置一个空的列表，然后打开文件，准备把文件中的内容导入这个列表 
因为这个文件的格式不是所需要的。所以，需要处理文件的格式。这里顺序很重要。
首先，利用逗号作为分隔符，先分开。然后利用eval评估函数，去掉引号，变成数字。
这里要用map函数来赋值第一个函数，也就是eval函数，不断地执行，转换成数字。
外面再添一个list函数，把所有地这些数字，形成一个小列表。再把这个小列表利用for循环语句，
一行一行地append导入这个最开始设置地空列表里面。最后再关闭这个文件 
简洁：空列表，打开文件，for循环读入，把"\n"换行符转换成" "空白，列表添加，从里到外，
split, eval, ,map, list, append---最后关闭文件（6行代码，思路却不简单。需要逻辑很清晰） 
--------
第三步，就很简单了。根据地自定义设置开始绘制图形。上面地格式是，第0个数字是型近距离；
第一个数字是，根据0或者1判断转向，0左1右，用一个if判断语句；第三到第五是rpg地颜色参数 
先for循环语句，确定循环次数，用len函数。颜色，fd，if判断转向，以及转向角度 

'''
import turtle as t
t.title("自动轨迹绘制")
t.setup(800,600)
t.pencolor("red")
t.pensize(5)
t.speed(10)
# 数据读取
datals=[]
f=open("data.trace",'rt')
for line in f:
    line=line.replace('\n','')
    datals.append(list(map(eval,line.split(','))))
f.close()
# 自动绘制
for i in range(len(datals)):
    t.pencolor(datals[i][3],datals[i][4],datals[i][5])
    t.fd(datals[i][0])
    t.left(datals[i][2]) if datals[i][1]==0 else t.right(datals[i][2])
t.done()


